with "hal";
with "nrf51";
with "embedded_components";

project Microbit_Bsp is

   for Target use "arm-eabi";
   for Runtime ("Ada") use "zfp-cortex-m0";

   for Languages use ("Ada", "Asm_CPP");

   for Library_Name use "Microbit_Bsp";
   for Library_Version use "0.1.0";

   for Source_Dirs use ("src");
   for Object_Dir use "obj";
   for Library_Dir use "lib";

   Linker_Switches := ("-T", Project'Project_dir & "/src/link.ld");

   package Device_Configuration is
      for CPU_Name use "ARM Cortex-M0";
      for Number_Of_Interrupts use "32";
      for Interrupt ("0") use "adl_irq";
      for Interrupt ("1") use "adl_irq";
      for Interrupt ("2") use "adl_irq";
      for Interrupt ("3") use "adl_irq";
      for Interrupt ("4") use "adl_irq";
      for Interrupt ("5") use "adl_irq";
      for Interrupt ("6") use "adl_irq";
      for Interrupt ("7") use "adl_irq";
      for Interrupt ("8") use "adl_irq";
      for Interrupt ("9") use "adl_irq";
      for Interrupt ("10") use "adl_irq";
      for Interrupt ("11") use "adl_irq";
      for Interrupt ("12") use "adl_irq";
      for Interrupt ("13") use "adl_irq";
      for Interrupt ("14") use "adl_irq";
      for Interrupt ("15") use "adl_irq";
      for Interrupt ("16") use "adl_irq";
      for Interrupt ("17") use "adl_irq";
      for Interrupt ("18") use "adl_irq";
      for Interrupt ("19") use "adl_irq";
      for Interrupt ("20") use "adl_irq";
      for Interrupt ("21") use "adl_irq";
      for Interrupt ("22") use "adl_irq";
      for Interrupt ("23") use "adl_irq";
      for Interrupt ("24") use "adl_irq";
      for Interrupt ("25") use "adl_irq";
      for Interrupt ("26") use "adl_irq";
      for Interrupt ("27") use "adl_irq";
      for Interrupt ("28") use "adl_irq";
      for Interrupt ("29") use "adl_irq";
      for Interrupt ("30") use "adl_irq";
      for Interrupt ("31") use "adl_irq";

      for Memories use ("flash", "ram");

      for Mem_Kind ("flash") use "rom";
      for Address  ("flash") use "0x00000000";
      for Size     ("flash") use "256K";

      for Mem_Kind ("ram") use "ram";
      for Address  ("ram") use "0x20000000";
      for Size     ("ram") use "16K";

      for Boot_Memory use "flash";
   end Device_Configuration;

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
     external ("MICROBIT_BSP_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));
   for Library_Kind use Library_Type;

   type Enabled_Kind is ("enabled", "disabled");
   Compile_Checks : Enabled_Kind := External ("MICROBIT_BSP_COMPILE_CHECKS", "disabled");
   Runtime_Checks : Enabled_Kind := External ("MICROBIT_BSP_RUNTIME_CHECKS", "enabled");
   Style_Checks : Enabled_Kind := External ("MICROBIT_BSP_STYLE_CHECKS", "enabled");
   Contracts_Checks : Enabled_Kind := External ("MICROBIT_BSP_CONTRACTS", "enabled");

   type Build_Kind is ("debug", "optimize");
   Build_Mode : Build_Kind := External ("MICROBIT_BSP_BUILD_MODE", "optimize");

   Compile_Checks_Switches := ();
   case Compile_Checks is
      when "enabled" =>
         Compile_Checks_Switches :=
           ("-gnatwa",  -- All warnings
            "-gnatVa",  -- All validity checks
            "-gnatwe"); -- Warnings as errors
      when others => null;
   end case;

   Runtime_Checks_Switches := ();
   case Runtime_Checks is
      when "enabled" => null;
      when others =>
         Runtime_Checks_Switches :=
           ("-gnatp"); -- Supress checks
   end case;

   Style_Checks_Switches := ();
   case Style_Checks is
      when "enabled" => null;
         Style_Checks_Switches :=
           ("-gnatyg",   -- GNAT Style checks
            "-gnaty-d",  -- Disable no DOS line terminators
            "-gnatyM120", -- Maximum line length
            "-gnatyO");  -- Overriding subprograms explicitly marked as such
      when others => null;
   end case;

   Contracts_Switches := ();
   case Contracts_Checks is
      when "enabled" => null;
         Contracts_Switches :=
           ("-gnata"); --  Enable assertions and contracts
      when others =>
   end case;

   Build_Switches := ();
   case Build_Mode is
      when "optimize" =>
         Build_Switches := ("-O3",     -- Optimization
                            "-gnatn"); -- Enable inlining
      when "debug" =>
         Build_Switches := ("-g",   -- Debug info
                            "-Og"); -- No optimization
   end case;

   package Compiler is
      for Default_Switches ("Ada") use
        Compile_Checks_Switches &
        Build_Switches &
        Runtime_Checks_Switches &
        Style_Checks_Switches &
        Contracts_Switches &
        ("-gnatw.X", -- Disable warnings for No_Exception_Propagation
         "-gnatQ");  -- Don't quit. Generate ALI and tree files even if illegalities
   end Compiler;

   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;

end Microbit_Bsp;
